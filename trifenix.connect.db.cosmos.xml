<?xml version="1.0"?>
<doc>
    <assembly>
        <name>trifenix.connect.db.cosmos</name>
    </assembly>
    <members>
        <member name="T:trifenix.connect.db.cosmos.BaseQueries">
            <summary>
            Consultas base para cosmosdb
            </summary>
        </member>
        <member name="F:trifenix.connect.db.cosmos.BaseQueries.DbArguments">
            <summary>
            DbArguments queda disponible fuera de BaseQueries
            </summary>
        </member>
        <member name="M:trifenix.connect.db.cosmos.BaseQueries.#ctor(trifenix.connect.arguments.CosmosDbArguments)">
            <summary>
            inicializa base queries con las conexiones a la base de dato
            </summary>
            <param name="dbArguments">argumentos de la base de datos</param>
        </member>
        <member name="M:trifenix.connect.db.cosmos.BaseQueries.SingleQuery``2(System.String,System.Object[])">
            <summary>
            Consulta que regresa solo un elemento de cosmos db
            </summary>
            <param name="query">consulta</param>
            <param name="args">argumentos</param>
            <typeparam name="TDOCUMENT">Tipo de elemento a obtener, debe heredar de documentBase</typeparam>
            <typeparam name="T">Tipo de resultado</typeparam>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.db.cosmos.BaseQueries.MultipleQuery``2(System.String,System.Object[])">
            <summary>
            Consulta que retorna multiples elementos de un tipo
            </summary>
            <param name="query">consulta</param>
            <param name="args">argumentos</param>
            <typeparam name="TDOCUMENT">documento</typeparam>
            <typeparam name="T">Tipo de Respuesta</typeparam>
            <returns>Collección de resultados desde cosmosdb</returns>
        </member>
        <member name="T:trifenix.connect.db.cosmos.exceptions.NonIdException`1">
            <summary>
            Excepción lanzada cuando no existe id.
            </summary>
            <typeparam name="T">Tipo de elemento que lanza el error</typeparam>
        </member>
        <member name="T:trifenix.connect.db.cosmos.exceptions.BaseException`1">
            <summary>
            Excepción base.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:trifenix.connect.db.cosmos.exceptions.Validation_Exception">
            <summary>
            Excepción de validación con una colección de los errores.
            </summary>
        </member>
        <member name="T:trifenix.connect.db.cosmos.exceptions.NonIdException`1">
            <summary>
            Excepción lanzada cuando no existe id.
            </summary>
            <typeparam name="T">Tipo de elemento que lanza el error</typeparam>
        </member>
        <member name="T:trifenix.connect.db.cosmos.exceptions.BaseException`1">
            <summary>
            Excepción base.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:trifenix.connect.db.cosmos.exceptions.Validation_Exception">
            <summary>
            Excepción de validación con una colección de los errores.
            </summary>
        </member>
        <member name="T:trifenix.connect.db.cosmos.MainGenericDb`1">
            <summary>
            Implementación de operaciones de base de datos cosmosDb
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:trifenix.connect.db.cosmos.MainGenericDb`1.Store">
            <summary>
            Store de Cosmonaut
            </summary>
        </member>
        <member name="M:trifenix.connect.db.cosmos.MainGenericDb`1.#ctor(trifenix.connect.arguments.CosmosDbArguments)">
            <summary>
            Implementación de operaciones de base de datos para cosmosDb
            </summary>
            <param name="args">identificaciones de cosmosDb</param>
        </member>
        <member name="M:trifenix.connect.db.cosmos.MainGenericDb`1.CreateUpdate(`0)">
            <summary>
            Crea o actualiza una entidad 
            Upsert, Añade o actualiza
            </summary>
            <param name="entity">entidad a guardar</param>
            <returns>identificador de la entidad a aguardar</returns>
        </member>
        <member name="M:trifenix.connect.db.cosmos.MainGenericDb`1.GetEntity(System.String)">
            <summary>
            Obtiene una entidad desde el store
            </summary>
            <param name="id">identificador de la entidad</param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.db.cosmos.MainGenericDb`1.DeleteEntity(System.String)">
            <summary>
            Elimina una entidad de la base de datos.
            </summary>
            <param name="id">identificador de la entidad a eliminar</param>
            <returns></returns>
        </member>
        <member name="T:trifenix.connect.db.cosmos.TimeStampDbQueries">
            <summary>
            Realiza consultas de timestamp directo a una entidad de cosmos db
            todos los elementos de cosmos db mantienen la fecha
            </summary>
        </member>
        <member name="M:trifenix.connect.db.cosmos.TimeStampDbQueries.#ctor(trifenix.connect.arguments.CosmosDbArguments)">
            <summary>
            Constructor con los parámetros de conexión
            </summary>
            <param name="args">parámetros de cosmos db</param>
        </member>
        <member name="M:trifenix.connect.db.cosmos.TimeStampDbQueries.GetTimestamps``1">
            <summary>
            Obtiene la colección de timestamps de un tipo de elemento
            </summary>
            <typeparam name="T">tipo de elemento</typeparam>
            <returns>Timestamp de todos los elementos de un tipo</returns>
        </member>
        <member name="T:trifenix.connect.db.model.DocumentBase">
            <summary>
            Entidad base para modelos de bases de datos basados en cosmonaut.
            </summary>
        </member>
        <member name="P:trifenix.connect.db.model.DocumentBase.CosmosEntityName">
            <summary>
            Partición dentro de base de datos documental,
            esto permite a través de un indice particionar un segmento del indice de la base de datos
            por nombre de la entidad o nombre de la clase.
            </summary>        
        </member>
        <member name="M:trifenix.connect.db.model.DocumentBase.#ctor">
            <summary>
            Asigna el nombre de la clase como partición.
            </summary>
        </member>
    </members>
</doc>
